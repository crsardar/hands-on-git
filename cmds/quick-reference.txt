# Quick Reference

# Git Config File Location
	~/.gitconfig

# See All Users
	git config --global --list

# Set User Name
	git config --global user.name "Chittaranjan Sardar"

# Set E-Mail Add
	git config --global user.email "my_mail@domain.com"

# Status
	git status

# Add 
	git add file_name.txt
	git add .

# Commit 
	git commit -m "Notes for commit"

# Push To Remote 
	git push origin main  # "origin" = remote name, "main" = branch name

	git push

# Configure N++ on Windows
	notepad++ .bash_profile
		# Inside .bash_profile 
		alias npp='notepad++.exe -multiInst -nosession'
	
	cat ~/.gitconfig
	git config --global core.editor "notepad++.exe -multiInst -nosession"

# Config TextMate on Mac
	git config --global core.editor "mate -w"

# Edit Configuration
	git config --global -e

# Create New Repo/Project
	git init repo_name
	
	git init 	# To add git to an existing project(first move inside base dir of existing project)
	
# Add File
	git add hipster.txt
	
	git add . 	# "." Recursively add all files, starting from present DIR to all Sub-DIR
	
	git add -A 	# "-A" Detects Add, Rename, Move
		# OR
		git add fine-name.txt
		git add -u 
	
	
# Undo-Add/Unstaged/Revert Stagged File
	git reset HEAD file-name.txt
	#	or
	git restore --staged file-name.txt
	
# Undo-Local Chnages(which is not "add"ed yet)
	git checkout -- filename
	#	or
	git restore file-name.txt
	
	
# Commit Files (Moves files to Staging area + adding git Indexes)
	git commit 		# Will open with default editor
	
	git commit -m "Inline commit message"
	
# Add + Commit In Single Step 
	git commit -am "This is commit message" 	# This can only be done on any Already tracking file. 
												# "-am", "a" = Add to Staging, "m" = message
	
# Rename and Moving File
	git mv old-file-name.txt new-file-name.txt 	
		# undo it -> git mv new-file-name.txt old-file-name.txt 
		
# Delete File
	git rm file-name.txt
	
## History ----------------------->
	git log
		# Press "Q" to exit from history
	git log --abbrev-commit
	git log --oneline --graph --decorate
	git log first-coomit-id...last-commit-id # Ranged based log.
	git log --since="3 days ago"
	git log -- file-name.txt
	git log --follow -- file-name.txt 	# History, even if file is Renamed
	
	# See Graphical history of All Branches
	git log --oneline --decorate --graph --all
	
	git show commit-id
	
	
# Clone
	git clone https://repo-url
	
# Update with remote
	git pull origin main		# "orgin" = remote repo name, "main" = branch name
	
# Publish Local Commits
	git push origin main 		# "orgin" = remote repo name, "main" = branch name 
	
# See The List Of All Tracking Files
	git ls-files
	
# Create Alias Command (hist)
	git config --global alias.hist "log --all --oneline --graph --decorate"
	
# Mac P4Merge Configuration
# https://www.perforce.com/downloads/visual-merge-tool
	# For Diff
	git config --global diff.tool p4merge
	git config --global difftool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge 
	# For Merge
	git config --global merge.tool p4merge
	git config --global mergetool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge
	
### Diff ----------------------->

	# Staging Vs Working
	git diff
	git difftool 	# To open with P4Merge
	
	# Last Commit Vs Working
	git diff HEAD 	
	git difftool HEAD
	
	# Staged Vs Last Commit
	git diff --staged HEAD
	git difftool --staged HEAD
	
	# Only On A Specific File
	git diff --staged HEAD -- file_name.txt
	
	# Commit Vs Commit 
	git diff commit_id_1 commit_id_2
	git diff commit_id_1 HEAD
	
	# Local Commit/Local Repo/HEAD Vs Remote/origin
	git diff main origin/main
	git difftool main origin/main -- file_name.txt
	
	# Between Branches 
	git diff branch_one branch_two
	
### Un - Dos ----------------------->
	
	# Un - Do Locan changes (even not staged)
	git restor . 	# Un - Do All Files
	git restore file_name.txs
	
	# Un - Do Staged
	git restore --staged file_name.txt
	git reset HEAD file_name.txt
	
	# Un - Do Commit 
	git reset HEAD~
	
### Branching ----------------------->

	# Show all branches 
	git branch -a
	
	# Create new branch
	git branch name_of_new_branch
	
	# Move to other branch
	git checkout name_of_new_branch
	
	# Create and Checkout to new branch
	git checkout -b new_branch_name 
	
	# Rename a branch
	git branch -m old_branch_name new_branch_name 	# "-m" = move
	
	# Delete a branch
	git checkout to_a_different_branch
	git branch -d branch_name 	# "-d" = delete
	
	
### Branching ----------------------->

	# Show all branches 
	git branch -a
	
	# Create new branch
	git branch name_of_new_branch
	
	# Move to other branch
	git checkout name_of_new_branch
	
	# Create and Checkout to new branch
	git checkout -b new_branch_name 
	
	
	# Rename a branch
	git branch -m old_branch_name new_branch_name 	# "-m" = move
	
	# Delete a branch
	git checkout to_a_different_branch
	git branch -d branch_name 	# "-d" = delete
	
	# Merge branches 
	git checkour destination_branch
	git merge source_branch
	
	# Off FastForward merging 
	git checkour destination_branch
	git merge source_branch --no-ff
	
	# Auto merge 
	git merge source_branch -m "Merge message"
	